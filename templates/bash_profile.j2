# {{ ansible_managed }}, ran by {{ template_uid }}@{{ template_host }}

export LC_ALL="en_US.UTF-8"

#source bash-completion if it exists
[ -f /usr/local/share/bash-completion/bash_completion ] && source /usr/local/share/bash-completion/bash_completion
[ -f /usr/share/bash-completion/bash_completion ] && source /usr/share/bash-completion/bash_completion

#source git-completion
[ -f /usr/share/doc/git/contrib/completion/git-completion.bash ]  && source /usr/share/doc/git/contrib/completion/git-completion.bash
[ -f /usr/share/bash-completion/completions/git ] && source /usr/share/bash-completion/completions/git

# vagrant complete
[ -f /opt/vagrant/embedded/gems/*/gems/vagrant-*/contrib/bash/completion.sh ] && source /opt/vagrant/embedded/gems/*/gems/vagrant-*/contrib/bash/completion.sh

# add local and python bin dirs to path
export PATH="$HOME/.bin/:$HOME/.local/bin/:$HOME/bin/:$PATH"

#shorten paths to max 5
export PROMPT_DIRTRIM=5

export EDITOR='vim'

#history settings
export HISTFILESIZE=1000000
export HISTSIZE=1000000
export HISTTIMEFORMAT='%h %e %T '
export HISTIGNORE='ls:ll:bg:fg:history'
export HISTCONTROL=ignoredups

#colors in man pages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m' # end the info box
export LESS_TERMCAP_so=$'\E[01;42;30m' # begin the info box
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'
export GROFF_NO_SGR=1

#less with more colors
export LESS='--quit-if-one-screen --ignore-case --status-column --LONG-PROMPT --RAW-CONTROL-CHARS --HILITE-UNREAD --tabs=4 --no-init --window=-4'

#packer settings
export PACKER_LOG=1
export PACKER_LOG_PATH=packer.log

#prevent lpass-cli from exiting
export LPASS_AGENT_TIMEOUT=0

if [ ! -S ~/.ssh/ssh_auth_sock ]; then
  eval `ssh-agent`
  ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi
export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
ssh-add -l > /dev/null || ssh-add

#aliases
alias ack='ack --pager="less -FRSX"'
alias ag='ag --pager="less -FRSX"'
alias cp='cp -i'
alias diff=colordiff
alias gb="cd \$(git root)"
alias goaccess='goaccess -p ~/.goaccessrc'
alias http='http --all --follow --max-redirects=5 --headers --style monokai'
alias ll="ls -la"
alias ls="ls --color=auto"
alias pdsh='pdsh -t 2'
alias pwgen="pwgen 12"
alias rm="rm -i"
alias tree="tree -a -I '.git|.DS_Store'"
alias c='DISPLAY=:0 xclip -selection clipboard'
alias v='DISPLAY=:0 xclip -o'
alias dockerclean='docker system prune --volumes'

# for user password
alias userpw="grub-crypt --sha-512"


export PYTHONSTARTUP=~/.pyrc

function ssldate () {
	openssl s_client -connect $1:443|openssl x509 -dates -noout
}

function mw () {
  echo $*|mail -r "{{ gitname }} <{{ privateemail }}>" -s "[m] $*" {{ workemail }}
}

function m () {
  echo $*|mail -r "{{ gitname }} <{{ privateemail }}>" -s "[m] $*" {{ privateemail }}
}

if [ -f "${HOME}/.gpg-agent-info" ]; then
    . "${HOME}/.gpg-agent-info"
    export GPG_AGENT_INFO
fi

function ssl_key_hash() { openssl rsa -noout -modulus -in "$@" | openssl md5 ;}
function ssl_cert_hash() { openssl x509 -noout -modulus -in "$@" | openssl md5 ;}
function ssl_csr_hash() { openssl req -noout -modulus -in "$@" | openssl md5 ;}

# https://sanctum.geek.nz/arabesque/terminal-annoyances/
[ -z $GDMSESSION ] && stty -ixon

set -- $SSH_CONNECTION
# touch ~/.tmux for autotmux
if [[ $PS1 && $SSH_TTY && -z $TMUX && $1 != $3 && -r ~/.autotmux ]]; then
    (tmux attach || tmux new-session)
fi

# Adds the current branch to the bash prompt when the working directory is
# part of a Git repository. Includes color-coding and indicators to quickly
# indicate the status of working directory.
#
# To use: Copy into ~/.bashrc and tweak if desired.
#
# Based upon the following gists:
# <https://gist.github.com/henrik/31631>
# <https://gist.github.com/srguiwiz/de87bf6355717f0eede5>
# Modified by me, using ideas from comments on those gists.
#
# License: MIT, unless the authors of those two gists object :)

git_branch() {
    # -- Finds and outputs the current branch name by parsing the list of
    #    all branches
    # -- Current branch is identified by an asterisk at the beginning
    # -- If not in a Git repository, error message goes to /dev/null and
    #    no output is produced
    git branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

git_status() {
    # Outputs a series of indicators based on the status of the
    # working directory:
    # + changes are staged and ready to commit
    # ! unstaged changes are present
    # ? untracked files are present
    # S changes have been stashed
    # P local commits need to be pushed to the remote
    local status="$(git status --porcelain 2>/dev/null)"
    local output=''
    [[ -n $(egrep '^[MADRC]' <<<"$status") ]] && output="$output+"
    [[ -n $(egrep '^.[MD]' <<<"$status") ]] && output="$output!"
    [[ -n $(egrep '^\?\?' <<<"$status") ]] && output="$output?"
    [[ -n $(git stash list) ]] && output="${output}S"
    [[ -n $(git log --branches --not --remotes) ]] && output="${output}P"
    [[ -n $output ]] && output="|$output"  # separate from branch name
    echo $output
}

git_color() {
    # Receives output of git_status as argument; produces appropriate color
    # code based on status of working directory:
    # - White if everything is clean
    # - Green if all changes are staged
    # - Red if there are uncommitted changes with nothing staged
    # - Yellow if there are both staged and unstaged changes
    local staged=$([[ $1 =~ \+ ]] && echo yes)
    local dirty=$([[ $1 =~ [!\?] ]] && echo yes)
    if [[ -n $staged ]] && [[ -n $dirty ]]; then
        echo -e '\033[1;33m'  # bold yellow
    elif [[ -n $staged ]]; then
        echo -e '\033[1;32m'  # bold green
    elif [[ -n $dirty ]]; then
        echo -e '\033[1;31m'  # bold red
    else
        echo -e '\033[1;37m'  # bold white
    fi
}

git_prompt() {
    # First, get the branch name...
    local branch=$(git_branch)
    # Empty output? Then we're not in a Git repository, so bypass the rest
    # of the function, producing no output
    if [[ -n $branch ]]; then
        local state=$(git_status)
        local color=$(git_color $state)
        # Now output the actual code to insert the branch and status
        echo -e "\x01$color\x02[$branch$state]\x01\033[00m\x02"  # last bit resets color
    fi
}

# Sample prompt declaration based off of the default Ubuntu 14.04.1 color
# prompt. Tweak as you see fit, or just stick "$(git_prompt)" into your
# favorite prompt.
PS1='$debian_chroot\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w$(git_prompt)\[\033[00m\]\$ '

if $((which lsusb 2> /dev/null && lsusb) | grep -q ePass2003) && \
	! ssh-add -q -l >/dev/null 2>&1 && \
	[[ -n $SESSION_MANAGER ]] && \
	[[ -n $TERM ]] ; then
		~/.local/bin/ssh-add-token
fi

if command -v kubectl > /dev/null 2>&1; then
	source <(kubectl completion bash)
	alias k=kubectl
	complete -F __start_kubectl k
fi

function geefvm () {
  DIR=$(mktemp -d)
  cd $DIR
  vagrant init centos/7 && vagrant up && vagrant ssh && vagrant destroy
  cd
  rm -r $DIR
}
