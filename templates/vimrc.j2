" {{ ansible_managed }}, ran by {{ template_uid }}@{{ template_host }}

set nocompatible              " be iMproved, required
filetype off                  " required

" http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/
" Setting up Vundle - the vim plugin bundler
    let iCanHazVundle=1
    let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
    if !filereadable(vundle_readme)
        echo "Installing Vundle.."
        echo ""
        silent !mkdir -p ~/.vim/bundle
        silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
        let iCanHazVundle=0
    endif
    set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

Bundle 'christoomey/vim-sort-motion'
Bundle 'sjl/gundo.vim.git'
Plugin 'airblade/vim-gitgutter'
Plugin 'chrisbra/csv.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'elzr/vim-json'
Plugin 'fgsch/vim-varnish'
Plugin 'godlygeek/tabular'
Plugin 'mileszs/ack.vim'
Plugin 'nvie/vim-flake8'
Plugin 'pearofducks/ansible-vim'
Plugin 'rafi/awesome-vim-colorschemes'
Plugin 'rodjek/vim-puppet'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-airline/vim-airline'
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'VundleVim/Vundle.vim'
Plugin 'w0rp/ale'
" All of your Plugins must be added before the following line

call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

syntax on

set encoding=utf-8
set ignorecase
set showmatch
set smartcase
set textwidth=79
set wrap
set path=$PWD/**
set formatoptions=qrn1
set wildmode=longest:full,full
set noundofile "don't use an undo file
set nobackup "don't make backups
set ttyfast "make vim scroll faster
set lazyredraw
set updatetime=100 "faster update time for gitgutter

set number
augroup numbertoggle
      autocmd!
      autocmd BufEnter,FocusGained,InsertLeave * set nocursorline
      autocmd BufLeave,FocusLost,InsertEnter   * set cursorline
augroup END

" ale settngs
let g:ale_list_window_size = 5

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" YouCompleteMe jump to definition
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
"python with virtualenv support
let g:ycm_python_binary_path = 'python'
let g:autopep8_select="E501"

"leaders

"unfold all folds
nnoremap <space> za
"remove all trailing whitespace
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
"indent all puppet arrows
nnoremap <leader>T :Tabularize /=><CR>
"spellcheck in english
nnoremap <leader>S :set spell spellang=en_us<CR>
"toggle relative line numbers
nnoremap <Leader>n :set relativenumber!<CR> :set number!<CR>
"toggle for Gundo tree-based undo
nnoremap <Leader>u :GundoToggle<CR>
let g:gundo_prefer_python3 = 1
" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

"set fugitive status command and increase height
nmap <leader>gs :Gstatus<CR><C-w>20+
set diffopt=vertical

" point ack.vim to ag if it's installed
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

"switch windows with direction keys
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"more natural splits
set splitbelow
set splitright

"airline config
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_skip_empty_sections = 1
let g:airline#extensions#ale#enabled = 1
set ttimeoutlen=10 "remove delay when switching norm/vis modes
set noshowmode "hide default mode indicator in favor of vim-airline

"netrw explorer options
let g:netrw_liststyle=3
let g:netrw_banner=0

let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'

"Highlight tab characters, trailing spaces and whitespace red
highlight TrailWhitespace ctermbg=red guibg=red
match TrailWhitespace /\s\+$\| \+\ze\t/
autocmd Syntax * syn match TrailWhitespace /\s\+$\| \+\ze\t/

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"Set syntax to shell for commands coming from ^X^E
autocmd BufRead,BufNewFile /var/*/bash-fc.* set syntax=sh

"Reread vimrc on save
autocmd bufwritepost .vimrc source %
set noai
set tabstop=2
set shiftwidth=2
set expandtab
set background=dark
set paste
set autoindent          " always set autoindenting on
set wildchar=<Tab>
set matchpairs+=<:>               "Allow % to bounce between angles too
set softtabstop=2
set shiftround
set pastetoggle=<F2>
set statusline+=%F
set laststatus=2
set hlsearch
" https://stackoverflow.com/questions/3534028/mac-terminal-vim-will-only-use-backspace-when-at-the-end-of-a-line
set backspace=indent,eol,start
set cursorcolumn
set cursorline
